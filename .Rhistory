attributes(obj)
calculate_CI <- function(x, conf=0.95) UseMethod("calculate_CI")
calculate_CI.ci_class <- function(obj, conf=0.95) {
mean_val <- mean(obj$data)
se <- sd(obj$data) / sqrt(length(obj$data))
margin <- qnorm((1 + 0.95) / 2) * se
lower_bound <- mean_val - margin
upper_bound <- mean_val + margin
return(c(lower_bound = lower_bound, upper_bound = upper_bound))
}
calculate_CI(obj)
## Read in the data locally each time you knit/render
penguins <- readRDS(here("data", "tuesdata_penguins.RDS"))
# calculate the distribution of body mass of penguins
penguins_summary <- penguins %>%
group_by(ID) %>%
summarise(
mean_mass = mean(body_mass_g),
sd_mass = sd(body_mass_g),
lower_bound = calculate_CI(body_mass_g,0.95)[1],
upper_bound = calculate_CI(body_mass_g,0.95)[2])
library(tidyverse)
library(stringr)
# 1. Start with penguins dataset and drop any rows with NAs.
penguins <- penguins %>%
drop_na()
# 2. Convert the sex names (character strings) to all upper case.
penguins <- penguins %>%
mutate(sex = str_to_upper(sex))
# 3. Create new ID column titled date that combines the species and island into one column separated by “-”. (e.g. “Adelie-island”).
penguins <- penguins %>%
unite(ID, species, island, sep = '-')
# calculate the distribution of body mass of penguins
penguins_summary <- penguins %>%
group_by(ID) %>%
summarise(
mean_mass = mean(body_mass_g),
sd_mass = sd(body_mass_g),
lower_bound = calculate_CI(body_mass_g,0.95)[1],
upper_bound = calculate_CI(body_mass_g,0.95)[2])
?UseMethod
View(calculate_CI)
library(SunanP2)
View(calculate_CI)
View(calculate_CI)
library(SunanP2)
set.seed(1234)
set.seed(1234)
x <- rnorm(100)
obj <- make_ci_class(x)
obj
output = calculate_CI(obj, 0.95)
calculate_CI
calculate_CI()
?calculate_CI()
calculate_CI(c(1:10), 0.95)
calculate_CI(obj, 0.95)
library(SunanP2)
# 3. Create new ID column titled date that combines the species and island into one column separated by “-”. (e.g. “Adelie-island”).
penguins <- penguins %>%
unite(ID, species, island, sep = '-')
## Read in the data locally each time you knit/render
penguins <- readRDS(here("data", "tuesdata_penguins.RDS"))
library(tidyverse)
library(stringr)
# 1. Start with penguins dataset and drop any rows with NAs.
penguins <- penguins %>%
drop_na()
# 2. Convert the sex names (character strings) to all upper case.
penguins <- penguins %>%
mutate(sex = str_to_upper(sex))
# 3. Create new ID column titled date that combines the species and island into one column separated by “-”. (e.g. “Adelie-island”).
penguins <- penguins %>%
unite(ID, species, island, sep = '-')
# calculate the distribution of body mass of penguins
obj = make_ci_class(penguins$body_mass_g, 0.95)
calculate_CI(obj)
？calculate_CI
?calculate_CI
calculate_CI(c(1:10), 0.95)
calculate_CI(c(1:10, NaN), 0.95)
calculate_CI <- function(obj, ...) UseMethod("calculate_CI")
calculate_CI.ci_class <- function(obj, conf=0.95) {
mean_val <- sample_mean(obj$data)
se <- sample_sd(obj$data) / sqrt(length(obj$data))
margin <- qnorm((1 + 0.95) / 2) * se
lower_bound <- mean_val - margin
upper_bound <- mean_val + margin
return(c(lower_bound = lower_bound, upper_bound = upper_bound))
}
# calculate the distribution of body mass of penguins
obj = make_ci_class(penguins$body_mass_g, 0.95)
calculate_CI(obj)
calcalculate_CI(c(1:10), 0.95)
calculate_CI(c(1:10), 0.95)
a = c(1,2,3,4)
class(a)
type
type(a)
typeof(a)
calculate_CI <- function(obj, ...) UseMethod("calculate_CI")
calculate_CI.ci_class <- function(obj, conf=0.95) {
mean_val <- sample_mean(obj$data)
se <- sample_sd(obj$data) / sqrt(length(obj$data))
margin <- qnorm((1 + 0.95) / 2) * se
lower_bound <- mean_val - margin
upper_bound <- mean_val + margin
return(c(lower_bound = lower_bound, upper_bound = upper_bound))
}
make_ci_class.numeric<- function(x, conf = 0.95) {
# Check if 'x' is numeric
if (!is.numeric(x)) {
stop("Input 'data' must be a numeric vector.")
}
# Check if 'level' is between 0 and 1
if (conf <= 0 || conf >= 1) {
stop("Confidence level must be between 0 and 1.")
}
# Create and return the ci_class object
structure(list(data = x, conf = conf), class = "ci_class")
}
make_ci_class<- function(x, conf = 0.95) {
# Check if 'x' is numeric
if (!is.numeric(x)) {
stop("Input 'data' must be a numeric vector.")
}
# Check if 'level' is between 0 and 1
if (conf <= 0 || conf >= 1) {
stop("Confidence level must be between 0 and 1.")
}
# Create and return the ci_class object
structure(list(data = x, conf = conf), class = "ci_class")
}
calculate_CI <- function(obj, ...) UseMethod("calculate_CI")
calculate_CI.numeric <- function(x, conf=0.95) {
# Calculate confidence interval using your desired method
mean_val <- sample_mean(x)
sd_val <- sample_sd(x)
n_obs <- length(x)
margin_error <- qnorm(1 - (1 - conf) / 2) * (sd_val / sqrt(n_obs))
lower_bound <- mean_val - margin_error
upper_bound <- mean_val + margin_error
result <- c('lower_bound' = lower_bound, 'upper_bound'= upper_bound)
result
}
calculate_CI.ci_class <- function(obj, conf=0.95) {
mean_val <- sample_mean(obj$data)
se <- sample_sd(obj$data) / sqrt(length(obj$data))
margin <- qnorm((1 + 0.95) / 2) * se
lower_bound <- mean_val - margin
upper_bound <- mean_val + margin
return(c(lower_bound = lower_bound, upper_bound = upper_bound))
}
calculate_CI(c(1:10), 0.95)
sample_mean <- function(x) {
N <- length(x)
if (N == 0) {
stop("The vector input is empty. Cannot calculate mean.")
}
mean_x <- sum(x) / N
return(mean_x)
}
sample_sd <- function(x) {
N <- length(x)
if (N == 0) {
stop("The vector input is empty. Cannot calculate standard deviation.")
}
mean_x <- sample_mean(x)
difference_sd <- (x - mean_x)^2
sd_x <- sqrt(sum(difference_sd) / (N - 1))
return(sd_x)
}
calculate_CI(c(1:10), 0.95)
x <- rnorm(100)
obj <- make_ci_class(x)
obj
output = calculate_CI(obj, 0.95)
calculate_CI(obj, 0.95)
# calculate the distribution of body mass of penguins
penguins_summary <- penguins %>%
group_by(ID) %>%
summarise(
mean_mass = mean(body_mass_g),
sd_mass = sd(body_mass_g),
lower_bound = calculate_CI(body_mass_g,0.95)[1],
upper_bound = calculate_CI(body_mass_g,0.95)[2])
penguins_summary
View(calculate_CI)
View(calculate_CI.ci_class)
obj
calculate_CI(obj)
penguins$body_mass_g
class(penguins$body_mass_g)
attributes(penguins$body_mass_g)
penguins %>%
select(-bill_length_mm, bill_depth_mm, flipper_length_mm) %>%
group_by(ID, year) %>%
summarise(
mean_mass = mean(body_mass_g),
sd_mass = sd(body_mass_g)
)
penguins %>%
select(-bill_length_mm, bill_depth_mm, flipper_length_mm) %>%
group_by(ID, year)
# calculate the distribution of body mass of penguins
penguins_summary2 <- penguins %>%
select(-bill_length_mm, bill_depth_mm, flipper_length_mm) %>%
group_by(ID, year) %>%
summarise(
mean_mass = mean(body_mass_g),
sd_mass = sd(body_mass_g),
lower_bound = calculate_CI(body_mass_g)[1],
upper_bound = calculate_CI(body_mass_g)[2])
penguins_summary2
# calculate the distribution of body mass of penguins
calculate_CI(penguins$body_mass_g)
library(SunanP2)
set.seed(1234)
x <- rnorm(100)
obj <- make_ci_class(x)
obj
output = calculate_CI(obj, 0.95)
output
calculate_CI(x)
library(SunanP2)
library(SunanP2)
calculate_CI(x)
calculate_CI()
?calculate_CI()
calculate_CI(c(1:10))
?calculate_CI(1)
calculate_CI(1)
calculate_CI(make_ci_class(1))
library(SunanP2)
library(SunanP2)
library(SunanP2)
library(SunanP2)
library(SunanP2)
library(SunanP2)
library(SunanP2)
library(SunanP2)
calculate_CI()
set.seed(1234)
x <- rnorm(100)
obj <- make_ci_class(x)
obj
output = calculate_CI(obj, 0.95)
calculate_CI(x)
library(SunanP2)
library(SunanP2)
?SunanP2
library(help = "SunanP2.Rproj")
library(help = "SunanP2")
fn_sin(1, 10)
sin(1)
calculate_CI(c(1:10, 'String'), 0.95)
library(SunanP2)
?calculate_CI
calculate_CI(c(1:10), 0.95)
calculate_CI(c(1:10, 'String'), 0.95)
set.seed(1234)
x <- rnorm(100)
obj <- make_ci_class(x)
output = calculate_CI(obj, 0.95)
output = calculate_CI(obj, 0.95)
obj
library(SunanP2)
set.seed(1234)
x <- rnorm(100)
obj <- make_ci_class(x)
output = calculate_CI(obj, 0.95)
output
obj
output = calculate_CI(x, 0.95)
output
print(obj)
calculate_CI(obj, conf = 0.90)
calculate_CI(obj, conf = 1.1)
library(SunanP2)
calculate_CI(obj, conf = 0.90)
calculate_CI(x, conf = 0.90)
calculate_CI(x, conf = 0.95)
calculate_CI(x, conf = 0.00)
make_ci_class(x)
a = make_ci_class(x)
print(a)
obj
print.ci_class <- function(x) {
cat("ci_class object with", length(x$data), "observations.\n")
invisible(x)
}
make_ci_class<- function(x, conf = 0.95) {
# Check if 'x' is numeric
if (!is.numeric(x)) {
stop("Input 'data' must be a numeric vector.")
}
# Check if 'level' is between 0 and 1
if (conf <= 0 || conf >= 1) {
stop("Confidence level must be between 0 and 1.")
}
# Create and return the ci_class object
structure(list(data = x, conf = conf), class = "ci_class")
}
obj
library(SunanP2)
a
a
library(SunanP2)
set.seed(1234)
x <- rnorm(100)
obj <- make_ci_class(x)
obj
print(obj)
library(SunanP2)
obj
source("~/Desktop/2023-2024/【JHU】Term-2/【Core】Statistical Programming Workflow/SunanP2/vignettes/functions.R", echo=TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(SunanP2)
## create the data point for the x axis as input
x <- seq(0,10, length.out=100)
## Generate data for points (cos(x))
points_data <- data.frame(x = x, y = cos(x))
## Generate data for lines (fn_cos(x, k))
k_values <- c(1,3,5,7,9)
lines_data <- expand.grid(x = x, k = k_values)
# create all combinations of the supplied vectors or factors
for (i in c(1:dim(lines_data)[1])){
lines_data$y[i] = fn_cos(lines_data$x[i], lines_data$k[i])
}
library(ggplot2)
ggplot() +
geom_line(data = lines_data, aes(x = x, y = y, color = as.factor(k)), size = 1) +
geom_point(data = points_data, aes(x = x, y = y), shape = 1, size = 1) +
#scale_color_manual(values = c("blue", "red", "green", "orange", "purple")) +
labs(title = "Cosine Function and Scaled Cosine Functions",
x = "X-axis",
y = "Y-axis") +
theme_minimal()
ggplot() +
geom_line(data = lines_data, aes(x = x, y = y, color = as.factor(k)), size = 1) +
geom_point(data = points_data, aes(x = x, y = y), shape = 1, size = 1) +
#scale_color_manual(values = c("blue", "red", "green", "orange", "purple")) +
labs(title = "Cosine Function and Scaled Cosine Functions",
x = "X-axis",
y = "Y-axis") +
ylim(-2,2)+
theme_minimal()
## create the data point for the x axis as input
x <- seq(0,10, length.out=100)
## Generate data for points (cos(x))
points_data <- data.frame(x = x, y = sin(x))
## Generate data for lines (fn_cos(x, k))
k_values <- c(1,3,5,7,9)
lines_data <- expand.grid(x = x, k = k_values)
# create all combinations of the supplied vectors or factors
for (i in c(1:dim(lines_data)[1])){
lines_data$y[i] = fn_sin(lines_data$x[i], lines_data$k[i])
}
ggplot() +
geom_line(data = lines_data, aes(x = x, y = y, color = as.factor(k)), size = 1) +
geom_point(data = points_data, aes(x = x, y = y), shape = 1, size = 1) +
#scale_color_manual(values = c("blue", "red", "green", "orange", "purple")) +
labs(title = "Cosine Function and Scaled Cosine Functions",
x = "X-axis",
y = "Y-axis") +
theme_minimal()
ggplot() +
geom_line(data = lines_data, aes(x = x, y = y, color = as.factor(k)), size = 1) +
geom_point(data = points_data, aes(x = x, y = y), shape = 1, size = 1) +
#scale_color_manual(values = c("blue", "red", "green", "orange", "purple")) +
labs(title = "Cosine Function and Scaled Cosine Functions",
x = "X-axis",
y = "Y-axis") +
ylim(-2,2)+
theme_minimal()
library(tidytuesdayR)
library(here)
## Test if a directory named data exists locally. If it does not, write an R function that creates it programmatically. Saves the data only once
if (!file.exists(here("data", "tuesdata_temperature.RDS"))) {
tuesdata <- tidytuesdayR::tt_load('2020-07-28')
penguins <- tuesdata$penguins
save_directory <- here("data") # File for saving data, must be created
if (!dir.exists(save_directory)) {
dir.create(save_directory, recursive = TRUE)
}
# save the files to RDS objects ()
saveRDS(tuesdata$penguins, file = here("data", "tuesdata_penguins.RDS"))
}
## Read in the data locally each time you knit/render
penguins <- readRDS(here("data", "tuesdata_penguins.RDS"))
library(tidyverse)
library(stringr)
# 1. Start with penguins dataset and drop any rows with NAs.
penguins <- penguins %>%
drop_na()
# 2. Convert the sex names (character strings) to all upper case.
penguins <- penguins %>%
mutate(sex = str_to_upper(sex))
# 3. Create new ID column titled date that combines the species and island into one column separated by “-”. (e.g. “Adelie-island”).
penguins <- penguins %>%
unite(ID, species, island, sep = '-')
# calculate the distribution of body mass of penguins
penguins_summary <- penguins %>%
group_by(ID) %>%
summarise(
mean_mass = mean(body_mass_g),
sd_mass = sd(body_mass_g),
lower_bound = calculate_CI(body_mass_g)[1],
upper_bound = calculate_CI(body_mass_g)[2])
# calculate the distribution of body mass of penguins
penguins_summary2 <- penguins %>%
select(-bill_length_mm, bill_depth_mm, flipper_length_mm) %>%
group_by(ID, year) %>%
summarise(
mean_mass = mean(body_mass_g),
sd_mass = sd(body_mass_g),
lower_bound = calculate_CI(body_mass_g)[1],
upper_bound = calculate_CI(body_mass_g)[2])
# combine the observed data and summarized result
penguins_combined <- left_join(penguins, penguins_summary[c('ID', 'mean_mass', 'sd_mass', 'lower_bound', 'upper_bound')], 'ID')
penguins_combined %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g)) +
geom_point(aes(x = bill_length_mm, y = body_mass_g),  linetype = "solid", color = rainbow(333), size = 1) +
labs(title = "Association between the length of bill and body mass",
subtitle = 'Point Chart: Bill Length(mm) ~ Body Mass(g)',
caption = "The data comes from Dr. Kristen Gorman by the way of palmerpenguins package",
x = "Bill Length(mm)", y = "Body Mass(g)") +
facet_wrap(~sex, ncol = NULL, scales = "free_y") +
theme_minimal()
plot_flipper_length_distribution <- function(ID, year) {
if (!any(penguins_combined$ID == ID & penguins_combined$year == year)) {
stop("There is no combination of city_name and year, plot doesn't exist.")
}
filtered <- penguins_combined %>%
filter(ID == ID, year == year) %>%
# Create a histogram of log-transformed rainfall
ggplot(aes(log(flipper_length_mm))) +
geom_histogram(bins=30, fill="white", color = "black") +
labs(
title = "The distribution of flipper length",
subtitle = paste("For", ID, "in", year),
x = "Flipper length (log scale, mm)",
y = "Frequency",
caption = "The data comes from Dr. Kristen Gorman by the way of palmerpenguins package",
) +
theme_minimal()
print(filtered)
}
# Example usage
plot_flipper_length_distribution(ID = "Adelie-Torgersen", year = 2007)
library(ggplot2)
body_mass_plot <- ggplot(penguins_summary2, aes(x = as.numeric(year), y = as.numeric(mean_mass))) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = lower_bound, ymax = upper_bound)) +
labs(
title = "Estimates of Mean Body Mass with 95% Confidence Intervals",
subtitle = 'Group by different ID',
x = "Year",
y = "Mean Body Mass (g)",
caption = "The data comes from Dr. Kristen Gorman by the way of palmerpenguins package",
) +
facet_wrap(~ID, ncol = NULL, scales = "free_y") +
theme_minimal()
print(body_mass_plot)
browseVignettes("SunanP2")
browseVignettes("vignettes/functions")
browseVignettes("functions")
vignette("functions", package = "SunanP2")
devtools::build_vignettes()
devtools::build(vignettes = TRUE, manual = TRUE)
devtools::install(build_vignettes = TRUE)
browseVignettes(SunanP2)
library(SunanP2)
browseVignettes(SunanP2)
library(SunanP2)
library(SunanP2)
browseVignettes(SunanP2)
browseVignettes('SunanP2')
library(SunanP2)
library(SunanP2)
devtools::build_vignettes()
library(SunanP2)
remove.packages('SunanP2')
# Install the devtools package if not already installed
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
# Install SunanP2 from GitHub
devtools::install_github("https://github.com/SNGao/biostat777-package-SunanP2")
library(SunanP2)
browseVignettes("SunanP2")
?devtools::install_github
remove('SunanP2')
remove.packages('SunanP2')
devtools::install_github("https://github.com/SNGao/biostat777-package-SunanP2", build_vignettes = TRUE)
browseVignettes('SunanP2')
library(SunanP2)
?prop.test
library(SunanP2)
library(SunanP2)
library(SunanP2)
remove.packages('SunanP2')
install.packages("~/Desktop/SunanP2_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library()
library(SunanP2)
browseVignettes('SunanP2')
browseVignettes('SunanP2')
remove.packages('SunanP2')
