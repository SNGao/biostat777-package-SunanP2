mean_x <- sum(x$data) / N
return(mean_x)
sum(x$data)
sum(x$data) / N
sample_mean <- function(x) {
N <- length(x$data)
if (N == 0) {
stop("The vector input is empty. Cannot calculate mean.")
}
mean_x <- sum(x$data) / N
return(mean_x)
}
sample_mean(x)
sample_mean(obj)
sample_sd(obj)
N <- length(x$data)
if (N == 0) {
stop("The vector input is empty. Cannot calculate standard deviation.")
}
mean_x <- sample_mean(x$data)
sample_mean <- function(x) {
N <- length(x$data)
if (N == 0) {
stop("The vector input is empty. Cannot calculate mean.")
}
mean_x <- sum(x$data) / N
return(mean_x)
}
sample_sd <- function(x) {
N <- length(x$data)
if (N == 0) {
stop("The vector input is empty. Cannot calculate standard deviation.")
}
mean_x <- sample_mean(x)
difference_sd <- (x$data - mean_x)^2
sd_x <- sqrt(sum(difference_sd) / (N - 1))
return(sd_x)
}
calculate_CI <- function(x) {
# Calculate confidence interval using your desired method
mean_val <- sample_mean(x$data)
sd_val <- sample_sd(x$data)
n_obs <- length(x$data)
margin_error <- qnorm(1 - (1 - x$level) / 2) * (sd_val / sqrt(n_obs))
lower_bound <- mean_val - margin_error
upper_bound <- mean_val + margin_error
return(list(lower_bound = lower_bound, upper_bound = upper_bound))
}
calculate_CI(obj)
N <- length(x$data)
if (N == 0) {
stop("The vector input is empty. Cannot calculate standard deviation.")
}
mean_x <- sample_mean(x)
difference_sd <- (x$data - mean_x)^2
sd_x <- sqrt(sum(difference_sd) / (N - 1))
return(sd_x)
sd_x
calculate_CI <- function(x) {
# Calculate confidence interval using your desired method
mean_val <- sample_mean(x)
sd_val <- sample_sd(x)
n_obs <- length(x$data)
margin_error <- qnorm(1 - (1 - x$level) / 2) * (sd_val / sqrt(n_obs))
lower_bound <- mean_val - margin_error
upper_bound <- mean_val + margin_error
return(list(lower_bound = lower_bound, upper_bound = upper_bound))
}
sample_mean <- function(x) {
N <- length(x$data)
if (N == 0) {
stop("The vector input is empty. Cannot calculate mean.")
}
mean_x <- sum(x$data) / N
return(mean_x)
}
sample_sd <- function(x) {
N <- length(x$data)
if (N == 0) {
stop("The vector input is empty. Cannot calculate standard deviation.")
}
mean_x <- sample_mean(x)
difference_sd <- (x$data - mean_x)^2
sd_x <- sqrt(sum(difference_sd) / (N - 1))
return(sd_x)
}
calculate_CI(obj)
calculate_CI <- function(x) {
# Calculate confidence interval using your desired method
mean_val <- sample_mean(x)
sd_val <- sample_sd(x)
n_obs <- length(x$data)
margin_error <- qnorm(1 - (1 - x$level) / 2) * (sd_val / sqrt(n_obs))
lower_bound <- mean_val - margin_error
upper_bound <- mean_val + margin_error
result <- list(lower_bound = lower_bound, upper_bound = upper_bound)
result
}
calculate_CI(obj)
calculate_CI <- function(x) {
# Calculate confidence interval using your desired method
mean_val <- sample_mean(x)
sd_val <- sample_sd(x)
n_obs <- length(x$data)
margin_error <- qnorm(1 - (1 - x$level) / 2) * (sd_val / sqrt(n_obs))
lower_bound <- mean_val - margin_error
upper_bound <- mean_val + margin_error
result <- list(lower_bound = lower_bound, upper_bound = upper_bound)
result
}
calculate_CI(obj)
calculate_CI <- function(x) {
# Calculate confidence interval using your desired method
mean_val <- sample_mean(x)
sd_val <- sample_sd(x)
n_obs <- length(x$data)
margin_error <- qnorm(1 - (1 - x$level) / 2) * (sd_val / sqrt(n_obs))
lower_bound <- mean_val - margin_error
upper_bound <- mean_val + margin_error
result <- c('lower_bound' = lower_bound, 'upper_bound'= upper_bound)
result
}
calculate_CI(obj)
# calculate the distribution of body mass of penguins
penguins_summary <- penguins %>%
group_by(ID) %>%
summarise(
mean_mass = mean(body_mass_g),
sd_mass = sd(body_mass_g),
lower_bound = calculate_CI(list(body_mass_g,0.95))[1],
upper_bound = calculate_CI(list(body_mass_g,0.95))[2])
list(body_mass_g,0.95)
## Read in the data locally each time you knit/render
penguins <- readRDS(here("data", "tuesdata_penguins.RDS"))
list(penguins$body_mass_g,0.95)
#' Create a ci_class object
#'
#' @param data A numeric vector for which confidence intervals will be calculated.
#' @export
make_ci_class <- function(data) {
structure(list(data = data), class = "ci_class")
}
#' Print method for ci_class
#'
#' @param x An instance of ci_class.
#' @export
print.ci_class <- function(x) {
cat("A ci_class with", length(x$data), "observations\n")
invisible(x)
}
#' Calculate confidence interval for ci_class
#'
#' @param obj An instance of ci_class.
#' @param conf Confidence level (e.g., 0.90 for 90% confidence interval).
#' @return A numeric vector with lower_bound and upper_bound.
#' @export
calculate_CI.ci_class <- function(obj, conf = 0.95) {
mean_val <- mean(obj$data)
se <- sd(obj$data) / sqrt(length(obj$data))
margin <- qnorm((1 + conf) / 2) * se
lower_bound <- mean_val - margin
upper_bound <- mean_val + margin
return(c(lower_bound = lower_bound, upper_bound = upper_bound))
}
# Create a ci_class object
set.seed(1234)
x <- rnorm(100)
obj <- make_ci_class(x)
# Print the ci_class object
print(obj)
# Calculate a 90% confidence interval
calculate_CI(obj, conf = 0.90)
obj
obj$data
?calculate_CI
# Calculate a 90% confidence interval
calculate_CI.ci_class(obj, conf = 0.90)
obj
# Calculate a 90% confidence interval
calculate_CI(obj, conf = 0.90)
class(obj)
calculate_CI(obj)
calculate_CI <- function(x, conf) {
# Calculate confidence interval using your desired method
mean_val <- sample_mean(x)
sd_val <- sample_sd(x)
n_obs <- length(x)
margin_error <- qnorm(1 - (1 - conf) / 2) * (sd_val / sqrt(n_obs))
lower_bound <- mean_val - margin_error
upper_bound <- mean_val + margin_error
result <- c('lower_bound' = lower_bound, 'upper_bound'= upper_bound)
result
}
calculate_CI(c(1:5), 0.9)
sample_mean <- function(x) {
N <- length(x)
if (N == 0) {
stop("The vector input is empty. Cannot calculate mean.")
}
mean_x <- sum(x) / N
return(mean_x)
}
sample_sd <- function(x) {
N <- length(x)
if (N == 0) {
stop("The vector input is empty. Cannot calculate standard deviation.")
}
mean_x <- sample_mean(x)
difference_sd <- (x - mean_x)^2
sd_x <- sqrt(sum(difference_sd) / (N - 1))
return(sd_x)
}
calculate_CI <- function(x, conf) {
# Calculate confidence interval using your desired method
mean_val <- sample_mean(x)
sd_val <- sample_sd(x)
n_obs <- length(x)
margin_error <- qnorm(1 - (1 - conf) / 2) * (sd_val / sqrt(n_obs))
lower_bound <- mean_val - margin_error
upper_bound <- mean_val + margin_error
result <- c('lower_bound' = lower_bound, 'upper_bound'= upper_bound)
result
}
calculate_CI(c(1:5), 0.9)
#' Calculate confidence interval for ci_class
#'
#' @param obj An instance of ci_class.
#' @param conf Confidence level (e.g., 0.90 for 90% confidence interval).
#' @return A numeric vector with lower_bound and upper_bound.
#' @export
#'
calculate_CI.ci_class <- function(obj, conf = 0.95) {
mean_val <- mean(obj$data)
se <- sd(obj$data) / sqrt(length(obj$data))
margin <- qnorm((1 + conf) / 2) * se
lower_bound <- mean_val - margin
upper_bound <- mean_val + margin
return(c(lower_bound = lower_bound, upper_bound = upper_bound))
}
#' Calculate confidence interval for ci_class
#'
#' @param obj An instance of ci_class.
#' @param conf Confidence level (e.g., 0.90 for 90% confidence interval).
#' @return A numeric vector with lower_bound and upper_bound.
#' @export
#'
calculate_CI.ci_class <- function(obj) {
mean_val <- mean(obj$data)
se <- sd(obj$data) / sqrt(length(obj$data))
margin <- qnorm((1 + 0.95) / 2) * se
lower_bound <- mean_val - margin
upper_bound <- mean_val + margin
return(c(lower_bound = lower_bound, upper_bound = upper_bound))
}
calculate_CI(obj)
is.object(obj)
attributes(obj)
calculate_CI <- function(x, conf=0.95) UseMethod("calculate_CI")
calculate_CI.ci_class <- function(obj, conf=0.95) {
mean_val <- mean(obj$data)
se <- sd(obj$data) / sqrt(length(obj$data))
margin <- qnorm((1 + 0.95) / 2) * se
lower_bound <- mean_val - margin
upper_bound <- mean_val + margin
return(c(lower_bound = lower_bound, upper_bound = upper_bound))
}
calculate_CI(obj)
## Read in the data locally each time you knit/render
penguins <- readRDS(here("data", "tuesdata_penguins.RDS"))
# calculate the distribution of body mass of penguins
penguins_summary <- penguins %>%
group_by(ID) %>%
summarise(
mean_mass = mean(body_mass_g),
sd_mass = sd(body_mass_g),
lower_bound = calculate_CI(body_mass_g,0.95)[1],
upper_bound = calculate_CI(body_mass_g,0.95)[2])
library(tidyverse)
library(stringr)
# 1. Start with penguins dataset and drop any rows with NAs.
penguins <- penguins %>%
drop_na()
# 2. Convert the sex names (character strings) to all upper case.
penguins <- penguins %>%
mutate(sex = str_to_upper(sex))
# 3. Create new ID column titled date that combines the species and island into one column separated by “-”. (e.g. “Adelie-island”).
penguins <- penguins %>%
unite(ID, species, island, sep = '-')
# calculate the distribution of body mass of penguins
penguins_summary <- penguins %>%
group_by(ID) %>%
summarise(
mean_mass = mean(body_mass_g),
sd_mass = sd(body_mass_g),
lower_bound = calculate_CI(body_mass_g,0.95)[1],
upper_bound = calculate_CI(body_mass_g,0.95)[2])
?UseMethod
View(calculate_CI)
library(SunanP2)
View(calculate_CI)
View(calculate_CI)
library(SunanP2)
set.seed(1234)
set.seed(1234)
x <- rnorm(100)
obj <- make_ci_class(x)
obj
output = calculate_CI(obj, 0.95)
calculate_CI
calculate_CI()
?calculate_CI()
calculate_CI(c(1:10), 0.95)
calculate_CI(obj, 0.95)
library(SunanP2)
# 3. Create new ID column titled date that combines the species and island into one column separated by “-”. (e.g. “Adelie-island”).
penguins <- penguins %>%
unite(ID, species, island, sep = '-')
## Read in the data locally each time you knit/render
penguins <- readRDS(here("data", "tuesdata_penguins.RDS"))
library(tidyverse)
library(stringr)
# 1. Start with penguins dataset and drop any rows with NAs.
penguins <- penguins %>%
drop_na()
# 2. Convert the sex names (character strings) to all upper case.
penguins <- penguins %>%
mutate(sex = str_to_upper(sex))
# 3. Create new ID column titled date that combines the species and island into one column separated by “-”. (e.g. “Adelie-island”).
penguins <- penguins %>%
unite(ID, species, island, sep = '-')
# calculate the distribution of body mass of penguins
obj = make_ci_class(penguins$body_mass_g, 0.95)
calculate_CI(obj)
？calculate_CI
?calculate_CI
calculate_CI(c(1:10), 0.95)
calculate_CI(c(1:10, NaN), 0.95)
calculate_CI <- function(obj, ...) UseMethod("calculate_CI")
calculate_CI.ci_class <- function(obj, conf=0.95) {
mean_val <- sample_mean(obj$data)
se <- sample_sd(obj$data) / sqrt(length(obj$data))
margin <- qnorm((1 + 0.95) / 2) * se
lower_bound <- mean_val - margin
upper_bound <- mean_val + margin
return(c(lower_bound = lower_bound, upper_bound = upper_bound))
}
# calculate the distribution of body mass of penguins
obj = make_ci_class(penguins$body_mass_g, 0.95)
calculate_CI(obj)
calcalculate_CI(c(1:10), 0.95)
calculate_CI(c(1:10), 0.95)
a = c(1,2,3,4)
class(a)
type
type(a)
typeof(a)
calculate_CI <- function(obj, ...) UseMethod("calculate_CI")
calculate_CI.ci_class <- function(obj, conf=0.95) {
mean_val <- sample_mean(obj$data)
se <- sample_sd(obj$data) / sqrt(length(obj$data))
margin <- qnorm((1 + 0.95) / 2) * se
lower_bound <- mean_val - margin
upper_bound <- mean_val + margin
return(c(lower_bound = lower_bound, upper_bound = upper_bound))
}
make_ci_class.numeric<- function(x, conf = 0.95) {
# Check if 'x' is numeric
if (!is.numeric(x)) {
stop("Input 'data' must be a numeric vector.")
}
# Check if 'level' is between 0 and 1
if (conf <= 0 || conf >= 1) {
stop("Confidence level must be between 0 and 1.")
}
# Create and return the ci_class object
structure(list(data = x, conf = conf), class = "ci_class")
}
make_ci_class<- function(x, conf = 0.95) {
# Check if 'x' is numeric
if (!is.numeric(x)) {
stop("Input 'data' must be a numeric vector.")
}
# Check if 'level' is between 0 and 1
if (conf <= 0 || conf >= 1) {
stop("Confidence level must be between 0 and 1.")
}
# Create and return the ci_class object
structure(list(data = x, conf = conf), class = "ci_class")
}
calculate_CI <- function(obj, ...) UseMethod("calculate_CI")
calculate_CI.numeric <- function(x, conf=0.95) {
# Calculate confidence interval using your desired method
mean_val <- sample_mean(x)
sd_val <- sample_sd(x)
n_obs <- length(x)
margin_error <- qnorm(1 - (1 - conf) / 2) * (sd_val / sqrt(n_obs))
lower_bound <- mean_val - margin_error
upper_bound <- mean_val + margin_error
result <- c('lower_bound' = lower_bound, 'upper_bound'= upper_bound)
result
}
calculate_CI.ci_class <- function(obj, conf=0.95) {
mean_val <- sample_mean(obj$data)
se <- sample_sd(obj$data) / sqrt(length(obj$data))
margin <- qnorm((1 + 0.95) / 2) * se
lower_bound <- mean_val - margin
upper_bound <- mean_val + margin
return(c(lower_bound = lower_bound, upper_bound = upper_bound))
}
calculate_CI(c(1:10), 0.95)
sample_mean <- function(x) {
N <- length(x)
if (N == 0) {
stop("The vector input is empty. Cannot calculate mean.")
}
mean_x <- sum(x) / N
return(mean_x)
}
sample_sd <- function(x) {
N <- length(x)
if (N == 0) {
stop("The vector input is empty. Cannot calculate standard deviation.")
}
mean_x <- sample_mean(x)
difference_sd <- (x - mean_x)^2
sd_x <- sqrt(sum(difference_sd) / (N - 1))
return(sd_x)
}
calculate_CI(c(1:10), 0.95)
x <- rnorm(100)
obj <- make_ci_class(x)
obj
output = calculate_CI(obj, 0.95)
calculate_CI(obj, 0.95)
# calculate the distribution of body mass of penguins
penguins_summary <- penguins %>%
group_by(ID) %>%
summarise(
mean_mass = mean(body_mass_g),
sd_mass = sd(body_mass_g),
lower_bound = calculate_CI(body_mass_g,0.95)[1],
upper_bound = calculate_CI(body_mass_g,0.95)[2])
penguins_summary
View(calculate_CI)
View(calculate_CI.ci_class)
obj
calculate_CI(obj)
penguins$body_mass_g
class(penguins$body_mass_g)
attributes(penguins$body_mass_g)
penguins %>%
select(-bill_length_mm, bill_depth_mm, flipper_length_mm) %>%
group_by(ID, year) %>%
summarise(
mean_mass = mean(body_mass_g),
sd_mass = sd(body_mass_g)
)
penguins %>%
select(-bill_length_mm, bill_depth_mm, flipper_length_mm) %>%
group_by(ID, year)
# calculate the distribution of body mass of penguins
penguins_summary2 <- penguins %>%
select(-bill_length_mm, bill_depth_mm, flipper_length_mm) %>%
group_by(ID, year) %>%
summarise(
mean_mass = mean(body_mass_g),
sd_mass = sd(body_mass_g),
lower_bound = calculate_CI(body_mass_g)[1],
upper_bound = calculate_CI(body_mass_g)[2])
penguins_summary2
# calculate the distribution of body mass of penguins
calculate_CI(penguins$body_mass_g)
library(SunanP2)
set.seed(1234)
x <- rnorm(100)
obj <- make_ci_class(x)
obj
output = calculate_CI(obj, 0.95)
output
calculate_CI(x)
library(SunanP2)
library(SunanP2)
calculate_CI(x)
calculate_CI()
?calculate_CI()
calculate_CI(c(1:10))
?calculate_CI(1)
calculate_CI(1)
calculate_CI(make_ci_class(1))
library(SunanP2)
library(SunanP2)
library(SunanP2)
library(SunanP2)
library(SunanP2)
library(SunanP2)
library(SunanP2)
library(SunanP2)
calculate_CI()
set.seed(1234)
x <- rnorm(100)
obj <- make_ci_class(x)
obj
output = calculate_CI(obj, 0.95)
calculate_CI(x)
library(SunanP2)
library(SunanP2)
?SunanP2
library(help = "SunanP2.Rproj")
library(help = "SunanP2")
fn_sin(1, 10)
sin(1)
calculate_CI(c(1:10, 'String'), 0.95)
