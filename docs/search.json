[{"path":"/articles/functions.html","id":"author-information","dir":"Articles","previous_headings":"","what":"Author Information","title":"functions","text":"Sunan Gao Johns Hopkins University Bloomberg School Public Health sgao57@jh.edu","code":""},{"path":"/articles/functions.html","id":"abstract-and-introduction","dir":"Articles","previous_headings":"","what":"Abstract and Introduction","title":"functions","text":"markdown file, show characteristics functions package. can divided two parts: (1) approximation features ‘fn_cos()’ ‘fn_sin()’. (2) application example ‘calculate_CI()’.","code":"library(SunanP2)"},{"path":"/articles/functions.html","id":"demonstrate-fn_cosx-k","dir":"Articles","previous_headings":"","what":"Demonstrate fn_cos(x, k)","title":"functions","text":"","code":"## create the data point for the x axis as input x <- seq(0,10, length.out=100)  ## Generate data for points (cos(x)) points_data <- data.frame(x = x, y = cos(x))  ## Generate data for lines (fn_cos(x, k)) k_values <- c(1,3,5,7,9) lines_data <- expand.grid(x = x, k = k_values)   # create all combinations of the supplied vectors or factors for (i in c(1:dim(lines_data)[1])){   lines_data$y[i] = fn_cos(lines_data$x[i], lines_data$k[i]) }"},{"path":"/articles/functions.html","id":"plot-the-graph-using-ggplot2-fn_cos","dir":"Articles","previous_headings":"Demonstrate fn_cos(x, k)","what":"Plot the graph using ggplot2 (fn_cos)","title":"functions","text":"","code":"library(ggplot2) ggplot() +   geom_line(data = lines_data, aes(x = x, y = y, color = as.factor(k)), size = 1) +   geom_point(data = points_data, aes(x = x, y = y), shape = 1, size = 1) +   #scale_color_manual(values = c(\"blue\", \"red\", \"green\", \"orange\", \"purple\")) +   labs(title = \"Cosine Function and Scaled Cosine Functions\",        x = \"X\",        y = \"Y: f(x)\") +   theme_minimal() ggplot() +   geom_line(data = lines_data, aes(x = x, y = y, color = as.factor(k)), size = 1) +   geom_point(data = points_data, aes(x = x, y = y), shape = 1, size = 1) +   #scale_color_manual(values = c(\"blue\", \"red\", \"green\", \"orange\", \"purple\")) +   labs(title = \"Cosine Function and Scaled Cosine Functions\",        x = \"X\",        y = \"Y: f(x)\") +   ylim(-2,2)+   theme_minimal()"},{"path":"/articles/functions.html","id":"demonstrate-fn_sinx-k","dir":"Articles","previous_headings":"","what":"Demonstrate fn_sin(x, k)","title":"functions","text":"","code":"## create the data point for the x axis as input x <- seq(0,10, length.out=100)  ## Generate data for points (cos(x)) points_data <- data.frame(x = x, y = sin(x))  ## Generate data for lines (fn_cos(x, k)) k_values <- c(1,3,5,7,9) lines_data <- expand.grid(x = x, k = k_values)   # create all combinations of the supplied vectors or factors for (i in c(1:dim(lines_data)[1])){   lines_data$y[i] = fn_sin(lines_data$x[i], lines_data$k[i]) }"},{"path":"/articles/functions.html","id":"plot-the-graph-using-ggplot2-fn_sin","dir":"Articles","previous_headings":"Demonstrate fn_sin(x, k)","what":"Plot the graph using ggplot2 (fn_sin)","title":"functions","text":"","code":"ggplot() +   geom_line(data = lines_data, aes(x = x, y = y, color = as.factor(k)), size = 1) +   geom_point(data = points_data, aes(x = x, y = y), shape = 1, size = 1) +   #scale_color_manual(values = c(\"blue\", \"red\", \"green\", \"orange\", \"purple\")) +   labs(title = \"Cosine Function and Scaled Cosine Functions\",        x = \"X\",        y = \"Y: f(x)\") +   theme_minimal() ggplot() +   geom_line(data = lines_data, aes(x = x, y = y, color = as.factor(k)), size = 1) +   geom_point(data = points_data, aes(x = x, y = y), shape = 1, size = 1) +   #scale_color_manual(values = c(\"blue\", \"red\", \"green\", \"orange\", \"purple\")) +   labs(title = \"Cosine Function and Scaled Cosine Functions\",        x = \"X\",        y = \"Y: f(x)\") +   ylim(-2,2)+   theme_minimal()"},{"path":"/articles/functions.html","id":"demonstrate-calculate_cix-conf","dir":"Articles","previous_headings":"","what":"Demonstrate calculate_CI(x, conf)","title":"functions","text":"part, use demo data TidyTuesday package deliver data analysis example.","code":""},{"path":"/articles/functions.html","id":"research-question","dir":"Articles","previous_headings":"Demonstrate calculate_CI(x, conf)","what":"Research Question","title":"functions","text":"association body characteristics Palmer Penguins. distribution varying trend body characteristics Palmer Penguins different species islands.","code":""},{"path":"/articles/functions.html","id":"original-data","dir":"Articles","previous_headings":"Demonstrate calculate_CI(x, conf)","what":"Original Data","title":"functions","text":"Data downloaded TidyTuesday. original data comes Dr. Kristen Gorman way palmerpenguins R package Dr. Kristen Gorman, Dr. Allison Horst, Dr. Alison Hill. ’ve bundled raw data cleaned data together. Data Source","code":""},{"path":"/articles/functions.html","id":"data-dictionary","dir":"Articles","previous_headings":"Demonstrate calculate_CI(x, conf)","what":"Data Dictionary","title":"functions","text":"data dictionary column names mean:   data dictionary","code":""},{"path":"/articles/functions.html","id":"load-the-data-into-r","dir":"Articles","previous_headings":"Demonstrate calculate_CI(x, conf)","what":"Load the data into R","title":"functions","text":"Download example data github save local site.","code":"if (!require(\"tidyverse\", quietly = TRUE)) {     install.packages(\"tidyverse\", repos = \"http://cran.us.r-project.org\") } #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.2     ✔ readr     2.1.4 #> ✔ forcats   1.0.0     ✔ stringr   1.5.0 #> ✔ lubridate 1.9.2     ✔ tibble    3.2.1 #> ✔ purrr     1.0.2     ✔ tidyr     1.3.0 #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors  if (!require(\"tidytuesdayR\", quietly = TRUE)) {     install.packages(\"tidytuesdayR\", repos = \"http://cran.us.r-project.org\") }  if (!require(\"here\", quietly = TRUE)) {     install.packages(\"here\", repos = \"http://cran.us.r-project.org\") } #> here() starts at /Users/gsn/Desktop/2023-2024/【JHU】Term-2/【Core】Statistical Programming Workflow/SunanP2  if (!require(\"ggplot2\", quietly = TRUE)) {     install.packages(\"ggplot2\", repos = \"http://cran.us.r-project.org\") } library(tidytuesdayR) library(here)  ## Test if a directory named data exists locally. If it does not, write an R function that creates it programmatically. Saves the data only once if (!file.exists(here(\"data\", \"tuesdata_penguins.csv\"))) {          tuesdata <- tidytuesdayR::tt_load('2020-07-28')     penguins <- tuesdata$penguins          save_directory <- here(\"data\") # File for saving data, must be created     if (!dir.exists(save_directory)) {       dir.create(save_directory, recursive = TRUE)     }          # save the files to RDS objects ()     write.csv(tuesdata$penguins, file = here(\"data\", \"tuesdata_penguins.csv\")) }  ## Read in the data locally each time you knit/render penguins <- read.csv(here(\"data\", \"tuesdata_penguins.csv\")) library(tidyverse) library(stringr)  # 1. Start with penguins dataset and drop any rows with NAs. penguins <- penguins %>%   drop_na()  # 2. Convert the sex names (character strings) to all upper case. penguins <- penguins %>%   mutate(sex = str_to_upper(sex))  # 3. Create new ID column titled date that combines the species and island into one column separated by “-”. (e.g. “Adelie-island”). penguins <- penguins %>%   unite(ID, species, island, sep = '-') # calculate the distribution of body mass of penguins penguins_summary <- penguins %>%    group_by(ID) %>%   summarise(     mean_mass = mean(body_mass_g),     sd_mass = sd(body_mass_g),     lower_bound = calculate_CI(body_mass_g)[1],     upper_bound = calculate_CI(body_mass_g)[2]) # calculate the distribution of body mass of penguins penguins_summary2 <- penguins %>%    select(-bill_length_mm, bill_depth_mm, flipper_length_mm) %>%   group_by(ID, year) %>%   summarise(     mean_mass = mean(body_mass_g),     sd_mass = sd(body_mass_g),     lower_bound = calculate_CI(body_mass_g)[1],      upper_bound = calculate_CI(body_mass_g)[2]) #> `summarise()` has grouped output by 'ID'. You can override using the `.groups` #> argument. # combine the observed data and summarized result penguins_combined <- left_join(penguins, penguins_summary[c('ID', 'mean_mass', 'sd_mass', 'lower_bound', 'upper_bound')], 'ID') penguins_combined %>%    ggplot(aes(x = bill_length_mm, y = body_mass_g)) +    geom_point(aes(x = bill_length_mm, y = body_mass_g),  linetype = \"solid\", color = rainbow(333), size = 1) +    labs(title = \"Association between the length of bill and body mass\",        subtitle = 'Point Chart: Bill Length(mm) ~ Body Mass(g)',        caption = \"The data comes from Dr. Kristen Gorman by the way of palmerpenguins package\",        x = \"Bill Length(mm)\", y = \"Body Mass(g)\") +    facet_wrap(~sex, ncol = NULL, scales = \"free_y\") +   theme_minimal() plot_flipper_length_distribution <- function(ID, year) {   if (!any(penguins_combined$ID == ID & penguins_combined$year == year)) {     stop(\"There is no combination of city_name and year, plot doesn't exist.\")   }      filtered <- penguins_combined %>%     filter(ID == ID, year == year) %>%      # Create a histogram of log-transformed rainfall     ggplot(aes(log(flipper_length_mm))) +     geom_histogram(bins=30, fill=\"white\", color = \"black\") +     labs(       title = \"The distribution of flipper length\",       subtitle = paste(\"For\", ID, \"in\", year),       x = \"Flipper length (log scale, mm)\",       y = \"Frequency\",       caption = \"The data comes from Dr. Kristen Gorman by the way of palmerpenguins package\",     ) +     theme_minimal()    print(filtered) }  # Example usage plot_flipper_length_distribution(ID = \"Adelie-Torgersen\", year = 2007) library(ggplot2)  body_mass_plot <- ggplot(penguins_summary2, aes(x = as.numeric(year), y = as.numeric(mean_mass))) +   geom_point() +   geom_line() +   geom_errorbar(aes(ymin = lower_bound, ymax = upper_bound)) +   labs(     title = \"Estimates of Mean Body Mass with 95% Confidence Intervals\",     subtitle = 'Group by different ID',     x = \"Year\",     y = \"Mean Body Mass (g)\",     caption = \"The data comes from Dr. Kristen Gorman by the way of palmerpenguins package\",   ) +   facet_wrap(~ID, ncol = NULL, scales = \"free_y\") +   theme_minimal()    print(body_mass_plot)"},{"path":"/articles/functions.html","id":"summary-of-analysis","dir":"Articles","previous_headings":"Demonstrate calculate_CI(x, conf)","what":"Summary of Analysis","title":"functions","text":"Compared four groups, Gentoo-Biscoe significantly higher mean body mass level wider range. linear ssociation length bill body mass. length flipper doesn’t follow normal distribution Adelie-Biscoe group, showing two peaks. seems fight common sense, might due time inference. different species island classifications, mean body mass penguins showed different trends 2007 2009. particular, even within species Adelie can vary different areas. addition, variation error bar consistent. However, interesting note mean body mass changes different species tend location (Biscoe, Dream), may imply living environment stronger influence relationship species level.","code":""},{"path":"/articles/functions.html","id":"functions-used-from-packages","dir":"Articles","previous_headings":"Demonstrate calculate_CI(x, conf)","what":"Functions used from packages","title":"functions","text":"dplyr: filter(); select(); summarise(); mutate(); group_by(); left_join() tidyr: drop_na(); unite() ggplot2: geom_point(); geom_line(); geom_errorbar(); facet_wrap()","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sunan Gao. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gao S (2023). SunanP2: Package developed Bios777 Project2 Sunan Gao. R package version 0.0.0.9000.","code":"@Manual{,   title = {SunanP2: Package developed for Bios777 Project2 by Sunan Gao},   author = {Sunan Gao},   year = {2023},   note = {R package version 0.0.0.9000}, }"},{"path":[]},{"path":"/index.html","id":"author","dir":"","previous_headings":"SunanP2","what":"Author","title":"Package developed for Bios777 Project2 by Sunan Gao","text":"Sunan Gao","code":""},{"path":"/index.html","id":"description","dir":"","previous_headings":"SunanP2","what":"Description","title":"Package developed for Bios777 Project2 by Sunan Gao","text":"goal SunanP2 realize basic statistical calculation, including trigonometric approximation estimating confidence interval.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"SunanP2","what":"Installation","title":"Package developed for Bios777 Project2 by Sunan Gao","text":"can install package using following R code:","code":"# Install the devtools package if not already installed if (!requireNamespace(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\") }  # Install SunanP2 from GitHub (contain vignettes) devtools::install_github(\"https://github.com/SNGao/biostat777-package-SunanP2\", build_vignettes = TRUE)"},{"path":"/index.html","id":"view-vignettes-in-sunanp2","dir":"","previous_headings":"SunanP2","what":"View vignettes in SunanP2","title":"Package developed for Bios777 Project2 by Sunan Gao","text":"","code":"library(SunanP2) browseVignettes('SunanP2')"},{"path":[]},{"path":"/index.html","id":"fn_sin","dir":"","previous_headings":"SunanP2 > Exported Functions","what":"fn_sin()","title":"Package developed for Bios777 Project2 by Sunan Gao","text":"Description: Compute approximation sin() function. Usage: fn_sin(x, k) Example:","code":"library(SunanP2) fn_sin(1, 10)  ## compare the difference ratio between sin() function. diff = (fn_sin(1, 10) - sin(1))/sin(1) print(diff)"},{"path":"/index.html","id":"fn_cos","dir":"","previous_headings":"SunanP2 > Exported Functions","what":"fn_cos()","title":"Package developed for Bios777 Project2 by Sunan Gao","text":"Description: Compute approximation cos() function. Usage: fn_cos(x, k) Example:","code":"library(SunanP2) fn_cos(1, 10)  ## compare the difference ratio between cos() function. diff = (fn_cos(1, 10) - cos(1))/cos(1) print(diff)"},{"path":"/index.html","id":"calculate_ci","dir":"","previous_headings":"SunanP2 > Exported Functions","what":"calculate_CI()","title":"Package developed for Bios777 Project2 by Sunan Gao","text":"Description: Calculate confidence intervals input data. Usage: calculate_CI(x, conf) Example:","code":"library(SunanP2) set.seed(1234) x <- rnorm(100) obj <- make_ci_class(x) calculate_CI(obj, 0.95) calculate_CI(x, 0.95)"},{"path":"/index.html","id":"make_ci_class","dir":"","previous_headings":"SunanP2 > Exported Functions","what":"make_ci_class()","title":"Package developed for Bios777 Project2 by Sunan Gao","text":"Description: change class object ci_class. Usage: make_ci_class(x) Example:","code":"library(SunanP2) set.seed(1234) x <- rnorm(100) obj <- make_ci_class(x) print(obj)"},{"path":"/reference/calculate_CI.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate confidence — calculate_CI","title":"Calculate confidence — calculate_CI","text":"Calculate confidence intervals simulated data","code":""},{"path":"/reference/calculate_CI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate confidence — calculate_CI","text":"","code":"calculate_CI(obj, ...)"},{"path":"/reference/calculate_CI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate confidence — calculate_CI","text":"x input data vector length N conf 1-α confidence interval","code":""},{"path":"/reference/calculate_CI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate confidence — calculate_CI","text":"lower upper bound confidence interval","code":""},{"path":"/reference/calculate_CI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate confidence — calculate_CI","text":"function calculates confidence intervals sample mean returns named vector length 2, first value lower_bound, second value upper_bound. input data contains NaN value, function print warning remind. input empty, function print warning remind input belong numeric ci_class class, function print warning remind. 1-α lower 0 larger 1, function print warning remind.","code":""},{"path":"/reference/calculate_CI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate confidence — calculate_CI","text":"","code":"calculate_CI(c(1:10), 0.95) #> lower_bound upper_bound  #>    3.623477    7.376523   library(SunanP2) set.seed(1234) x <- rnorm(100) obj <- make_ci_class(x) output = calculate_CI(obj, 0.95)"},{"path":"/reference/fn_cos.html","id":null,"dir":"Reference","previous_headings":"","what":"Cosine function — fn_cos","title":"Cosine function — fn_cos","text":"Compute approximation cosine function.","code":""},{"path":"/reference/fn_cos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cosine function — fn_cos","text":"","code":"fn_cos(x, k = 1)"},{"path":"/reference/fn_cos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cosine function — fn_cos","text":"x number transformed k number terms used series expansion beyond constant 1. value k always 1.","code":""},{"path":"/reference/fn_cos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cosine function — fn_cos","text":"approximation cosine function","code":""},{"path":"/reference/fn_cos.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cosine function — fn_cos","text":"function computes approximation cosine function. input data contains NaN value, function print warning remind. input data contains Non-numeric value, function print warning remind.","code":""},{"path":"/reference/fn_cos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cosine function — fn_cos","text":"","code":"fn_cos(1, 10) #> [1] 0.5403023"},{"path":"/reference/fn_sin.html","id":null,"dir":"Reference","previous_headings":"","what":"Sine function — fn_sin","title":"Sine function — fn_sin","text":"Compute approximation sin() function.","code":""},{"path":"/reference/fn_sin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sine function — fn_sin","text":"","code":"fn_sin(x, k = 1)"},{"path":"/reference/fn_sin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sine function — fn_sin","text":"x number transformed k number terms used series expansion beyond constant 1. value k always 1.","code":""},{"path":"/reference/fn_sin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sine function — fn_sin","text":"approximation sine function","code":""},{"path":"/reference/fn_sin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sine function — fn_sin","text":"function computes approximation Sine function. input data contains NaN value, function print warning remind. input data contains Non-numeric value, function print warning remind.","code":""},{"path":"/reference/fn_sin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sine function — fn_sin","text":"","code":"fn_sin(1, 10) #> [1] 0.841471"},{"path":"/reference/make_ci_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a constructor function for the ci_class — make_ci_class","title":"Create a constructor function for the ci_class — make_ci_class","text":"Create constructor function ci_class called make_ci_class()","code":""},{"path":"/reference/make_ci_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a constructor function for the ci_class — make_ci_class","text":"","code":"make_ci_class(x, conf = 0.95)"},{"path":"/reference/make_ci_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a constructor function for the ci_class — make_ci_class","text":"x input data vector length N conf 1-α confidence interval","code":""},{"path":"/reference/make_ci_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a constructor function for the ci_class — make_ci_class","text":"ci_class confidence interval","code":""},{"path":"/reference/make_ci_class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a constructor function for the ci_class — make_ci_class","text":"function creates constructor function ci_class called make_ci_class(). input data contains NaN value, function print warning remind. input data contains Non-numeric value, function print warning remind.","code":""},{"path":"/reference/make_ci_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a constructor function for the ci_class — make_ci_class","text":"","code":"library(SunanP2) set.seed(1234) x <- rnorm(100) obj <- make_ci_class(x) print(obj) #> ci_class object with 100 observations."}]
